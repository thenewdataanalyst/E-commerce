# -*- coding: utf-8 -*-
"""Projet 5_DRIHIMI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LaEpfPLZ7hPeqJJ-I22euisZ7pFaWUJM
"""

from google.colab import drive
drive.mount ('/content/drive')

import pandas as pd

import seaborn as sns

import numpy as np

"""**Fichier ERP**"""

df_erp = pd.read_excel('/content/drive/MyDrive/erp.xlsx')

df_erp

df_erp.shape

df_erp.dtypes

df_erp.duplicated('product_id').sum()

df_erp.isna().mean()

"""**Fichier Web**"""

df_web = pd.read_excel('/content/drive/MyDrive/web.xlsx')

df_web.head

df_web=df_web.rename(columns={'sku': 'id_web'})

df_web.shape

df_web.dtypes

df_web.duplicated('id_web').sum()

df_web.isna().mean()

"""- Supprimer les duplicatas (supprimer la version qui a le plus de valeurs manquantes )"""

df_web.duplicated('id_web').sum()

df_web['NbNan']=df_web.isna().sum(axis=1)

df_web=df_web.sort_values('NbNan')

df_web=df_web.drop_duplicates('id_web', keep='first')

df_web = df_web.drop('NbNan', axis=1)

df_web.duplicated('id_web').sum()

df_web.shape

"""**Fichier Liaison**"""

df_liaison = pd.read_excel('/content/drive/MyDrive/liaison.xlsx')

df_liaison

df_liaison.shape

df_liaison.dtypes

df_liaison.duplicated(['product_id', 'id_web']).sum()

df_liaison.duplicated('product_id').sum()

df_liaison.duplicated('id_web').sum()

df_liaison.isna().mean()

"""**JOINTURES**

- Jointure entre le fichier liaison et le fichier erp
"""

df_liaison.shape

df_erp.shape

df_liaison = pd.merge(df_liaison, df_erp, on=['product_id'], how='left')

df_liaison

"""- Jointure avec le fichier web"""

df_liaison.shape

df_web.shape

df_liaison = pd.merge(df_liaison, df_web, on=['id_web'], how='left')

df_liaison

"""- Création d'une colonne chiffre d'affaire"""

df_liaison['CA'] = df_liaison['total_sales']*df_liaison['price']

"""- Chiffre d'affaire par produit"""

df_liaison[['product_id', 'id_web', 'CA']]

"""- Chiffre d'affaire total réalisé en ligne"""

df_liaison[['CA']].sum()

"""**ANALYSE DE LA VARIABLE " PRICE "**"""

df_liaison['price'].shape

df_liaison['price'].describe()

"""- utlisation de l'écart intérquartile pour trouver les outliers

limite inférieure et limite supérieure
"""

Q1 = df_liaison['price'].quantile(0.25)
Q1

Q3 = df_liaison['price'].quantile(0.75)
Q3

IQ = Q3-Q1
IQ

Limit_Inf = Q1 - 1.5*IQ
Limit_Inf

Limit_Sup = Q3 + 1.5*IQ
Limit_Sup

"""           outliers"""

df_liaison[(df_liaison['price'] < Limit_Inf) | (df_liaison['price'] > Limit_Sup)].shape

df_liaison[(df_liaison['price'] < Limit_Inf) | (df_liaison['price'] > Limit_Sup)]

"""           dataframe sans les outliers"""

df0 = df_liaison[(df_liaison['price'] > Limit_Inf) & (df_liaison['price'] < Limit_Sup)]
df0

df0.shape

sns.boxplot(x=df_liaison['price']).set_title('Boxplot Price')

"""- utlisation des quantiles pour trouver les outliers

**avec 5%**

limite inférieure et limite supérieure
"""

min, max = df_liaison['price'].quantile([0.05, 0.95])
min, max

"""           outliers"""

df_liaison[(df_liaison['price']>max)|(df_liaison['price']<min)].shape

df_liaison[(df_liaison['price']>max)|(df_liaison['price']<min)]

"""           dataframe sans les outliers"""

df1 = df_liaison[(df_liaison['price'] < max) & (df_liaison['price'] > min)]
df1

df1.shape

"""**avec 1%**

limite inférieure et limite supérieure
"""

min1, max1 = df_liaison['price'].quantile([0.01, 0.99])
min1, max1

"""           outliers"""

df_liaison[(df_liaison['price']>max1)|(df_liaison['price']<min1)].shape

df_liaison[(df_liaison['price']>max1)|(df_liaison['price']<min1)]

"""           dataframe sans les outliers"""

df2 = df_liaison[(df_liaison['price'] < max1) & (df_liaison['price'] > min1)]
df2

df2.shape

"""- utilisation de l'écart type pour trouver les outliers

limite inférieure et limite supérieure
"""

df_liaison.price.std()

limit_inf = df_liaison.price.mean() - 2*df_liaison.price.std()
limit_inf

limit_sup = df_liaison.price.mean() + 2*df_liaison.price.std()
limit_sup

"""           outliers"""

df_liaison[(df_liaison['price']>limit_sup) | (df_liaison['price']<limit_inf)].shape

df_liaison[(df_liaison['price']>limit_sup) | (df_liaison['price']<limit_inf)]

"""           dataframe sans les outliers"""

df3 = df_liaison[(df_liaison['price']<limit_sup) & (df_liaison['price']>limit_inf)]
df3

df3.shape

"""- utilisation du Z-Score pour trouver les outliers =>  (x-mean)/std

création de la colonne Z-Score
"""

df_liaison['z_score'] = ( df_liaison.price - df_liaison.price.mean() ) / df_liaison.price.std()
df_liaison['z_score']

"""           outliers"""

df_liaison[(df_liaison['z_score']<-2) | (df_liaison['z_score']>2)].shape

df_liaison[(df_liaison['z_score']<-2) | (df_liaison['z_score']>2)]

"""           dataframe sans les outliers"""

df4 = df_liaison[(df_liaison['z_score']>-2) & (df_liaison['z_score']<2)]
df4

df4.shape